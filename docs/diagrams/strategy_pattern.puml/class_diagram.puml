@startuml
abstract "Actionnable" as C_0005779141798409352122
abstract C_0005779141798409352122 {
+Actionnable(const std::string & name, long long time) : void
+~Actionnable() = default : void
..
+displayProcessingTime() const : void
{abstract} +execute() = 0 : void
+getName() const : const std::string
+getProcessingTime() : long long
__
#m_name : std::string
#m_processingTime : long long
}
class "ActionDescription" as C_0001680707169970652848
class C_0001680707169970652848 {
__
+cumulatedProcessingTime : long long
+name : std::string
+order : int
+processingTime : long long
}
class "Task" as C_0012685396697071441978
class C_0012685396697071441978 {
+Task() = default : void
+Task(const std::string & name) : void
+Task<Actions...>(const std::string & name, std::shared_ptr<Actions>... actions) : void
..
+addAction(std::shared_ptr<Actionnable> action) : void
+execute() : void
+getActionDescriptions() const : std::vector<ActionDescription>
+getActions() : std::vector<std::shared_ptr<Actionnable>>
+getDuration() const : long long
+getName() const : std::string
+hasExecuted() : bool
__
-m_actions : std::vector<std::shared_ptr<Actionnable>>
-m_hasExecuted : bool
-m_name : std::string
}
class "Actionner" as C_0018042704236802414186
class C_0018042704236802414186 {
+Actionner() : void
+Actionner(int actionnerId, const std::string & name, std::shared_ptr<std::mutex> outputMtx, Parameters * parameters, const int maxTaskSize) : void
+Actionner(const Actionner & other) : void
+~Actionner() : void
..
+hasTask() const : bool
+isBusy() const : bool
#loadingBar(std::shared_ptr<Task> task) const : void
#printProgress(std::string taskName, float progress, int barWidth) const : void
+setParameters(Parameters * parameters) : void
+submitTask(std::shared_ptr<Task> task) : bool
#threadLoop() : void
__
#m_id : int
#m_isBusy : std::atomic<bool>
#m_maxSizeQueue : const int
#m_name : std::string
#m_outputMutex : std::shared_ptr<std::mutex>
#m_parameters : Parameters *
#m_stopThread : std::atomic<bool>
#m_taskCondition : std::condition_variable
#m_taskMutex : std::mutex
#m_taskQueue : std::queue<std::shared_ptr<Task>>
#m_workerThread : std::thread
}
class "Worker" as C_0011809437179116272381
class C_0011809437179116272381 {
+Worker() : void
+Worker(int actionnerId, const std::string & name, std::shared_ptr<std::mutex> outputMtx, Parameters * config = nullptr, const Point2D & coordinates = Point2D(), const int maxTaskSize = 100, float speed = 8.0f) : void
..
+getCoordinates() const : const Point2D &
+getId() const : const int &
+getOrder() const : Order *
+getSpeed() const : const float &
+getTool() const : const ToolType &
+releaseProduct() : std::unique_ptr<Product>
+setCoordinates(const Point2D & coordinates) : void
+setCoordinates(const double & x, const double & y) : void
+setOrder(Order & order) : void
+setSpeed(const float & speed) : void
+setTool(const ToolType & type) : void
+takeProduct(std::unique_ptr<Product> product) : void
__
-m_currentCoodinates : Point2D
-m_currentOrder : Order *
-m_currentProduct : std::unique_ptr<Product>
-m_currentTool : ToolType
-m_speed : float
}
class "Scheduler" as C_0001371562265082181169
class C_0001371562265082181169 {
-Scheduler() : void
+Scheduler(const Scheduler &) = deleted : void
+~Scheduler() : void
..
+operator=(const Scheduler &) = deleted : Scheduler &
..
+affectOrder(std::shared_ptr<Order> order) : void
-affectTaskToIdleWorker(std::shared_ptr<Task> task) : int
-affectTaskToWorker(std::shared_ptr<Task> task, const int & workerId) : void
-affectToolToWorker(const ToolType & toolType, const int & workerId) : bool
+areWorkersIdle() const : bool
+createWorker(const std::string & name, bool nameById) : std::shared_ptr<Worker>
-fetchNextOrder() : std::shared_ptr<Order>
-getIdleWorker() const : int
{static} +getInstance() : Scheduler &
+getWorker(const int & workerId) const : std::shared_ptr<Worker>
+getWorkerSize() const : size_t
+getWorkers() const : const std::vector<std::shared_ptr<Worker>> &
+hasRemainingTask() const : bool
+init(int workerSize) : void
+loadFromFile(const std::string & filename) : void
+runScheduler() : void
-scheduleThread() : void
+setDefaultWorkerCoordinates(const Point2D & coordinates) : void
+setMaxTaskWorkerSize(const int & maxTaskSize) : void
+setOutputMutex(std::shared_ptr<std::mutex> outputMutex) : void
+setParameters(Parameters * parameters) : void
+stopScheduler() : void
-storeOrder(std::shared_ptr<Order> task) : void
__
-m_carrierSize : int
-m_carrierUsedCounter : int
-m_defaultWorkerCoordinates : Point2D
-m_forkliftSize : int
-m_forkliftUsedCounter : int
-m_maxTaskSize : int
-m_orderQueue : std::queue<std::shared_ptr<Order>>
-m_outputMutex : std::shared_ptr<std::mutex>
-m_parameters : Parameters *
-m_schedulerMutex : std::mutex
-m_schedulerThread : std::thread
-m_stopThread : bool
{static} -m_workerCounter : std::atomic<int>
-m_workerSize : int
-m_workers : std::vector<std::shared_ptr<Worker>>
}
class "Move" as C_0011937890994270573141
class C_0011937890994270573141 {
+Move(const std::string & name, long long time, std::shared_ptr<Worker> movable, const Point2D & destination) : void
..
+execute() : void
__
-m_actionner : std::shared_ptr<Worker>
-m_destination : Point2D
}
class "TakeProduct" as C_0001340163226568550889
class C_0001340163226568550889 {
+TakeProduct(const std::string & name, long long time, std::shared_ptr<Worker> worker, StorageSpace * storage, std::shared_ptr<Order> order) : void
+TakeProduct(const TakeProduct &) = deleted : void
..
+operator=(const TakeProduct &) = deleted : TakeProduct &
..
+execute() : void
__
-m_actionner : std::shared_ptr<Worker>
-m_order : std::shared_ptr<Order>
-m_storage : StorageSpace *
}
class "ReleaseProduct" as C_0014082224354344259852
class C_0014082224354344259852 {
+ReleaseProduct(const std::string & name, long long time, std::shared_ptr<Worker> worker, DeliveryPlatform * delivery) : void
..
+execute() : void
__
-m_actionner : std::shared_ptr<Worker>
-m_delivery : DeliveryPlatform *
}
class "TaskFactory" as C_0001013872974579043541
class C_0001013872974579043541 {
{static} +createPrepareOrderTask(std::shared_ptr<Order> order, std::shared_ptr<Worker> worker) : std::shared_ptr<Task>
{static} -getRandomIntInRange(long long min, long long max) : long long
__
}
C_0012685396697071441978 ..> C_0001680707169970652848
C_0012685396697071441978 o-- C_0005779141798409352122 : -m_actions
C_0018042704236802414186 o-- C_0012685396697071441978 : #m_taskQueue
C_0018042704236802414186 <|-- C_0011809437179116272381
C_0001371562265082181169 ..> C_0012685396697071441978
C_0001371562265082181169 o-- C_0011809437179116272381 : -m_workers
C_0011937890994270573141 --> C_0011809437179116272381 : -m_actionner
C_0005779141798409352122 <|-- C_0011937890994270573141
C_0001340163226568550889 --> C_0011809437179116272381 : -m_actionner
C_0005779141798409352122 <|-- C_0001340163226568550889
C_0014082224354344259852 --> C_0011809437179116272381 : -m_actionner
C_0005779141798409352122 <|-- C_0014082224354344259852
C_0001013872974579043541 ..> C_0011809437179116272381
C_0001013872974579043541 ..> C_0012685396697071441978

'Generated with clang-uml, version 0.6.0
'LLVM version Ubuntu clang version 15.0.7
@enduml
